{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","rel","href","integrity","crossorigin","className","style","paddingBottom","position","paddingTop","color","direction","shaftWidth","shaftLength","headWidth","headLength","fill","stroke","strokeWidth","onClick","window","scrollTo","top","bottom","behavior","backgroundColor","textAlign","fontSize","minHeight","paddingLeft","paddingRight","zIndex","display","flexDirection","flexWrap","justifyContent","Card","bg","text","width","height","Img","variant","src","Body","Title","Text","Button","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.37065a49.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { Card, Button } from \"react-bootstrap\";\nimport Arrow from \"react-arrow\";\nimport ScrollUpButton from \"react-scroll-up-button\";\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\nfunction App() {\n  return (\n    <>\n      <link\n        rel=\"stylesheet\"\n        href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n        integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n        crossorigin=\"anonymous\"\n      />\n      <div className=\"App\">\n        <div className=\"sticky\" style={{ paddingBottom: \"7%\" }}>\n          <div className=\" Title1 \">\n            <h1>Callum Ross</h1>\n          </div>\n          <div className=\"Title2\">\n            <h2>My Site and Projects!</h2>\n          </div>\n        </div>\n        <div\n          className=\"sticky\"\n          style={{\n            position: \"sticky\",\n            paddingTop: \"20%\",\n            color: \"white\"\n          }}\n        >\n          <h3>\n            <mark>Computer Science student at QUT</mark>\n          </h3>\n          <Arrow\n            className=\"zoom2\"\n            direction=\"down\"\n            shaftWidth={10}\n            shaftLength={0}\n            headWidth={50}\n            headLength={40}\n            fill=\"white\"\n            stroke=\"black\"\n            strokeWidth={1}\n            onClick={() =>\n              window.scrollTo({\n                top: 745,\n                bottom: 0,\n                behavior: \"smooth\"\n              })\n            }\n          />\n        </div>\n      </div>\n      <ScrollUpButton />\n\n      <Tabs>\n        <TabList\n          style={{\n            backgroundColor: \"#2B314B\",\n            color: \"white\",\n            textAlign: \"center\",\n            fontSize: \"150%\"\n          }}\n        >\n          <Tab>About Me</Tab>\n          <Tab>My Projects</Tab>\n        </TabList>\n\n        <TabPanel></TabPanel>\n        <TabPanel>\n          <div\n            style={{\n              minHeight: \"50vh\",\n              paddingTop: \"5%\",\n              paddingLeft: \"15%\",\n              paddingRight: \"15%\",\n\n              zIndex: \"10\",\n              display: \"flex\",\n              flexDirection: \"row\",\n              flexWrap: \"wrap\",\n              backgroundColor: \"#2B314B\",\n              justifyContent: \"center\"\n            }}\n          >\n            <Card\n              bg=\"secondary\"\n              className=\"zoom\"\n              text=\"white\"\n              style={{ width: \"18rem\", height: \"35rem\" }}\n            >\n              <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\n              <Card.Body>\n                <Card.Title>Card Title</Card.Title>\n                <Card.Text>\n                  Some quick example text to build on the card title and make up\n                  the bulk of the card's content.\n                </Card.Text>\n                <Button variant=\"primary\">Go somewhere</Button>\n              </Card.Body>\n            </Card>\n            <Card\n              bg=\"secondary\"\n              className=\"zoom\"\n              text=\"white\"\n              style={{ width: \"18rem\", height: \"35rem\" }}\n            >\n              <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\n              <Card.Body>\n                <Card.Title>Card Title</Card.Title>\n                <Card.Text>\n                  Some quick example text to build on the card title and make up\n                  the bulk of the card's content.\n                </Card.Text>\n                <Button variant=\"primary\">Go somewhere</Button>\n              </Card.Body>\n            </Card>\n            <Card\n              bg=\"secondary\"\n              className=\"zoom\"\n              text=\"white\"\n              style={{ width: \"18rem\", height: \"35rem\" }}\n            >\n              <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\n              <Card.Body>\n                <Card.Title>Card Title</Card.Title>\n                <Card.Text>\n                  Some quick example text to build on the card title and make up\n                  the bulk of the card's content.\n                </Card.Text>\n                <Button variant=\"primary\">Go somewhere</Button>\n              </Card.Body>\n            </Card>\n            <Card\n              bg=\"secondary\"\n              className=\"zoom\"\n              text=\"white\"\n              style={{ width: \"18rem\", height: \"35rem\" }}\n            >\n              <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\n              <Card.Body>\n                <Card.Title>Card Title</Card.Title>\n                <Card.Text>\n                  Some quick example text to build on the card title and make up\n                  the bulk of the card's content.\n                </Card.Text>\n                <Button variant=\"primary\">Go somewhere</Button>\n              </Card.Body>\n            </Card>\n            <Card\n              bg=\"secondary\"\n              className=\"zoom\"\n              text=\"white\"\n              style={{ width: \"18rem\", height: \"35rem\" }}\n            >\n              <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\n              <Card.Body>\n                <Card.Title>Card Title</Card.Title>\n                <Card.Text>\n                  Some quick example text to build on the card title and make up\n                  the bulk of the card's content.\n                </Card.Text>\n                <Button variant=\"primary\">Go somewhere</Button>\n              </Card.Body>\n            </Card>\n            <Card\n              bg=\"secondary\"\n              className=\"zoom\"\n              text=\"white\"\n              style={{ width: \"18rem\", height: \"35rem\" }}\n            >\n              <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\n              <Card.Body>\n                <Card.Title>Card Title</Card.Title>\n                <Card.Text>\n                  Some quick example text to build on the card title and make up\n                  the bulk of the card's content.\n                </Card.Text>\n                <Button variant=\"primary\">Go somewhere</Button>\n              </Card.Body>\n            </Card>\n            <Card\n              bg=\"secondary\"\n              className=\"zoom\"\n              text=\"white\"\n              style={{ width: \"18rem\", height: \"35rem\" }}\n            >\n              <Card.Img variant=\"top\" src=\"holder.js/100px180\" />\n              <Card.Body>\n                <Card.Title>Card Title</Card.Title>\n                <Card.Text>\n                  Some quick example text to build on the card title and make up\n                  the bulk of the card's content.\n                </Card.Text>\n                <Button variant=\"primary\">Go somewhere</Button>\n              </Card.Body>\n            </Card>\n          </div>{\" \"}\n        </TabPanel>\n      </Tabs>\n      <div></div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}